root                                  ::=   QueryUnit

QueryUnit    ::=    Query
Query    ::=    Prologue ( SelectQuery | ConstructQuery | DescribeQuery | AskQuery ) ValuesClause
UpdateUnit    ::=    Update
Prologue    ::=    ( BaseDecl | PrefixDecl )*
BaseDecl    ::=    [bB][aA][sS][eE] WS+ IRIREF
PrefixDecl    ::=    [pP][rR][eE][fF][iI][xX] WS+ PNAME-NS WS+ IRIREF WS*
SelectQuery    ::=    SelectClause WS* DatasetClause* WS* WhereClause WS* SolutionModifier
SubSelect    ::=    SelectClause WhereClause SolutionModifier ValuesClause
SelectClause    ::=    [sS][eE][lL][eE][cC][tT] WS+ ( [dD][iI][sS][tT][iI][nN][cC][tT] | [rR][eE][dD][uU][cC][eE][dD] )? WS* ( ( ( Var | ( "(" WS* Expression WS* [aA][sS] WS* Var WS* ")" ) ) WS* )+ | "*" )
ConstructQuery    ::=    [cC][oO][nN][sS][tT][rR][uU][cC][tT] ( ConstructTemplate DatasetClause* WhereClause SolutionModifier | DatasetClause* [wW][hH][eE][rR][eE] "{" TriplesTemplate? "}" SolutionModifier )
DescribeQuery    ::=    [dD][eE][sS][cC][rR][iI][bB][eE] ( VarOrIri+ | "*" ) DatasetClause* WhereClause? SolutionModifier
AskQuery    ::=    [aA][sS][kK] WS+ DatasetClause* WhereClause SolutionModifier
DatasetClause    ::=    [fF][rR][oO][mM] ( DefaultGraphClause | NamedGraphClause )
DefaultGraphClause    ::=    SourceSelector
NamedGraphClause    ::=    [nN][aA][mM][eE][dD] SourceSelector
SourceSelector    ::=    iri
WhereClause    ::=    ([wW][hH][eE][rR][eE] WS*)? GroupGraphPattern
SolutionModifier    ::=    GroupClause? HavingClause? OrderClause? LimitOffsetClauses?
GroupClause    ::=    [gG][rR][oO][uU][pP] [bB][yY] GroupCondition+
GroupCondition    ::=    BuiltInCall | FunctionCall | "(" Expression ( [aA][sS] Var )? ")" | Var
HavingClause    ::=    [hH][aA][vV][iI][nN][gG] HavingCondition+
HavingCondition    ::=    Constraint
OrderClause    ::=    [oO][rR][dD][eE][rR] [bB][yY] OrderCondition+
OrderCondition    ::=    ( ( [aA][sS][cC] | [dD][eE][sS][cC] ) BrackettedExpression ) |
                                            ( Constraint | Var )
LimitOffsetClauses    ::=    LimitClause OffsetClause? |
                                            OffsetClause LimitClause?
LimitClause    ::=    [lL][iI][mM][iI][tT] INTEGER
OffsetClause    ::=    [oO][fF][fF][sS][eE][tT] INTEGER
ValuesClause    ::=    ( [vV][aA][lL][uU][eE][sS] DataBlock )?
Update    ::=    Prologue ( Update1 ( ";" Update )? )?
Update1    ::=    Load | Clear | Drop | Add | Move | Copy | Create | InsertData | DeleteData | DeleteWhere | Modify
Load    ::=    [lL][oO][aA][dD] [sS][iI][lL][eE][nN][tT]? iri ( [iI][nN][tT][oO] GraphRef )?
Clear    ::=    [cC][lL][eE][aA][rR] [sS][iI][lL][eE][nN][tT]? GraphRefAll
Drop    ::=    [dD][rR][oO][pP] [sS][iI][lL][eE][nN][tT]? GraphRefAll
Create    ::=    [cC][rR][eE][aA][tT][eE] [sS][iI][lL][eE][nN][tT]? GraphRef
Add    ::=    [aA][dD][dD] [sS][iI][lL][eE][nN][tT]? GraphOrDefault [tT][oO] GraphOrDefault
Move    ::=    [mM][oO][vV][eE] [sS][iI][lL][eE][nN][tT]? GraphOrDefault [tT][oO] GraphOrDefault
Copy    ::=    [cC][oO][pP][yY] [sS][iI][lL][eE][nN][tT]? GraphOrDefault [tT][oO] GraphOrDefault
InsertData    ::=    [iI][nN][sS][eE][rR][tT]" "[dD][aA][tT][aA] QuadData
DeleteData    ::=    [dD][eE][lL][eE][tT][eE]" "[dD][aA][tT][aA] QuadData
DeleteWhere    ::=    [dD][eE][lL][eE][tT][eE]" "[wW][hH][eE][rR][eE] QuadPattern
Modify    ::=    ( [wW][iI][tT][hH] iri )? ( DeleteClause InsertClause? | InsertClause ) UsingClause* [wW][hH][eE][rR][eE] GroupGraphPattern
DeleteClause    ::=    [dD][eE][lL][eE][tT][eE] QuadPattern
InsertClause    ::=    [iI][nN][sS][eE][rR][tT] QuadPattern
UsingClause    ::=    [uU][sS][iI][nN][gG] ( iri | [nN][aA][mM][eE][dD] iri )
GraphOrDefault    ::=    [dD][eE][fF][aA][uU][lL][tT] | [gG][rR][aA][pP][hH]? iri
GraphRef    ::=    [gG][rR][aA][pP][hH] iri
GraphRefAll    ::=    GraphRef | [dD][eE][fF][aA][uU][lL][tT] | [nN][aA][mM][eE][dD] | [aA][lL][lL]
QuadPattern    ::=    "{" Quads "}"
QuadData    ::=    "{" Quads "}"
Quads    ::=    TriplesTemplate? ( QuadsNotTriples "."? TriplesTemplate? )*
QuadsNotTriples    ::=    [gG][rR][aA][pP][hH] VarOrIri "{" TriplesTemplate? "}"
TriplesTemplate    ::=    TriplesSameSubject ( "." TriplesTemplate? )?
GroupGraphPattern    ::=    "{" WS* ( SubSelect | GroupGraphPatternSub ) WS* "}"
GroupGraphPatternSub    ::=    TriplesBlock? ( GraphPatternNotTriples WS* "."? WS* TriplesBlock? )*
TriplesBlock    ::=    TriplesSameSubjectPath ( WS* "." WS* TriplesBlock? )?
GraphPatternNotTriples    ::=    GroupOrUnionGraphPattern | OptionalGraphPattern | MinusGraphPattern | GraphGraphPattern | ServiceGraphPattern | Filter | Bind | InlineData
OptionalGraphPattern    ::=    [oO][pP][tT][iI][oO][nN][aA][lL] WS* GroupGraphPattern
GraphGraphPattern    ::=    [gG][rR][aA][pP][hH] VarOrIri GroupGraphPattern
ServiceGraphPattern    ::=    [sS][eE][rR][vV][iI][cC][eE] [sS][iI][lL][eE][nN][tT]? VarOrIri GroupGraphPattern
Bind    ::=    [bB][iI][nN][dD] "(" Expression [aA][sS] Var ")"
InlineData    ::=    [vV][aA][lL][uU][eE][sS] DataBlock
DataBlock    ::=    InlineDataOneVar | InlineDataFull
InlineDataOneVar    ::=    Var "{" DataBlockValue* "}"
InlineDataFull    ::=    ( NIL | "(" Var* ")" ) "{" ( "(" DataBlockValue* ")" | NIL )* "}"
DataBlockValue    ::=    iri | RDFLiteral | NumericLiteral | BooleanLiteral | [uU][nN][dD][eE][fF]
MinusGraphPattern    ::=    [mM][iI][nN][uU][sS] GroupGraphPattern
GroupOrUnionGraphPattern    ::=    GroupGraphPattern ( [uU][nN][iI][oO][nN] GroupGraphPattern )*
Filter    ::=    [fF][iI][lL][tT][eE][rR] WS* Constraint
Constraint    ::=    BrackettedExpression | BuiltInCall | FunctionCall
FunctionCall    ::=    iri ArgList
ArgList    ::=    NIL | "(" [dD][iI][sS][tT][iI][nN][cC][tT]? Expression ( "," Expression )* ")"
ExpressionList    ::=    NIL | "(" Expression ( "," Expression )* ")"
ConstructTemplate    ::=    "{" ConstructTriples? "}"
ConstructTriples    ::=    TriplesSameSubject ( "." ConstructTriples? )?
TriplesSameSubject    ::=    VarOrTerm PropertyListNotEmpty | TriplesNode PropertyList
PropertyList    ::=    PropertyListNotEmpty?
PropertyListNotEmpty    ::=    Verb ObjectList ( ";" ( Verb ObjectList )? )*
Verb    ::=    VarOrIri | "a"
ObjectList    ::=    Object ( "," Object )*
Object    ::=    GraphNode
TriplesSameSubjectPath    ::=    VarOrTerm WS* PropertyListPathNotEmpty | TriplesNodePath WS* PropertyListPath
PropertyListPath    ::=    PropertyListPathNotEmpty?
PropertyListPathNotEmpty    ::=    ( VerbPath | VerbSimple ) WS* ObjectListPath WS* ( ";" WS* ( ( VerbPath | VerbSimple ) WS* ObjectList )? WS* )*
VerbPath    ::=    Path
VerbSimple    ::=    Var
ObjectListPath    ::=    ObjectPath ( "," ObjectPath )*
ObjectPath    ::=    GraphNodePath
Path    ::=    PathAlternative
PathAlternative    ::=    PathSequence ( "|" PathSequence )*
PathSequence    ::=    PathEltOrInverse ( "/" PathEltOrInverse )*
PathElt    ::=    PathPrimary PathMod?
PathEltOrInverse    ::=    PathElt | "^" PathElt
PathMod    ::=    "?" | "*" | "+"
PathPrimary    ::=    iri | "a" | "!" PathNegatedPropertySet | "(" Path ")"
PathNegatedPropertySet    ::=    PathOneInPropertySet | "(" ( PathOneInPropertySet ( "|" PathOneInPropertySet )* )? ")"
PathOneInPropertySet    ::=    iri | "a" | "^" ( iri | "a" )
Integer    ::=    INTEGER
TriplesNode    ::=    Collection | BlankNodePropertyList
BlankNodePropertyList    ::=    "[" PropertyListNotEmpty "]"
TriplesNodePath    ::=    CollectionPath | BlankNodePropertyListPath
BlankNodePropertyListPath    ::=    "[" PropertyListPathNotEmpty "]"
Collection    ::=    "(" GraphNode+ ")"
CollectionPath    ::=    "(" GraphNodePath+ ")"
GraphNode    ::=    VarOrTerm | TriplesNode
GraphNodePath    ::=    VarOrTerm | TriplesNodePath
VarOrTerm    ::=    Var | GraphTerm
VarOrIri    ::=    Var | iri
Var    ::=    VAR1 | VAR2
GraphTerm    ::=    iri | RDFLiteral | NumericLiteral | BooleanLiteral | BlankNode | NIL
Expression    ::=    ConditionalOrExpression
ConditionalOrExpression    ::=    ConditionalAndExpression ( "||" ConditionalAndExpression )*
ConditionalAndExpression    ::=    ValueLogical ( "&&" ValueLogical )*
ValueLogical    ::=    RelationalExpression
RelationalExpression    ::=    NumericExpression ( WS* "=" WS* NumericExpression | "!=" NumericExpression | "<" NumericExpression | ">" NumericExpression | "<=" NumericExpression | ">=" NumericExpression | [iI][nN] ExpressionList | [nN][oO][tT] [iI][nN] ExpressionList )?
NumericExpression    ::=    AdditiveExpression
AdditiveExpression    ::=    MultiplicativeExpression ( "+" MultiplicativeExpression | "-" MultiplicativeExpression | ( NumericLiteralPositive | NumericLiteralNegative ) ( ( "*" UnaryExpression ) | ( "/" UnaryExpression ) )* )*
MultiplicativeExpression    ::=    UnaryExpression ( "*" UnaryExpression | "/" UnaryExpression )*
UnaryExpression    ::=     "!" PrimaryExpression |
                                           "+" PrimaryExpression |
                                           "-" PrimaryExpression |
                                           PrimaryExpression
PrimaryExpression    ::=    BrackettedExpression | BuiltInCall | iriOrFunction | RDFLiteral | NumericLiteral | BooleanLiteral | Var
BrackettedExpression    ::=    "(" WS* Expression WS* ")"
BuiltInCall    ::=    Aggregate |
                                           [sS][tT][rR] "(" Expression ")" |
                                           [lL][aA][nN][gG] "(" Expression ")" |
                                           [lL][aA][nN][gG][mM][aA][tT][cC][hH][eE][sS] "(" Expression "," Expression ")" |
                                           [dD][aA][tT][aA][tT][yY][pP][eE] "(" Expression ")" |
                                           [bB][oO][uU][nN][dD] "(" Var ")" |
                                           [uU][rR][iI] "(" Expression ")" |
                                           [bB][nN][oO][dD][eE] ( "(" Expression ")" | NIL ) |
                                           [rR][aA][nN][dD] NIL |
                                           [aA][bB][sS] "(" Expression ")" |
                                           [cC][eE][iI][lL] "(" Expression ")" |
                                           [fF][lL][oO][oO][rR] "(" Expression ")" |
                                           [rR][oO][uU][nN][dD] "(" Expression ")" |
                                           [cC][oO][nN][cC][aA][tT] ExpressionList |
                                           SubstringExpression |
                                           [sS][tT][rR][lL][eE][nN] "(" Expression ")" |
                                           StrReplaceExpression |
                                           [uU][cC][aA][sS][eE] "(" Expression ")" |
                                           [lL][cC][aA][sS][eE] "(" Expression ")" |
                                           [eE][nN][cC][oO][dD][eE]"_"[fF][oO][rR]"_"[uU][rR][iI] "(" Expression ")" |
                                           [cC][oO][nN][tT][aA][iI][nN][sS] "(" Expression "," Expression ")" |
                                           [sS][tT][rR][sS][tT][aA][rR][tT][sS] "(" Expression "," Expression ")" |
                                           [sS][tT][rR][eE][nN][dD][sS] "(" Expression "," Expression ")" |
                                           [sS][tT][rR][bB][eE][fF][oO][rR][eE] "(" Expression "," Expression ")" |
                                           [sS][tT][rR][aA][fF][tT][eE][rR] "(" Expression "," Expression ")" |
                                           [yY][eE][aA][rR] "(" Expression ")" |
                                           [mM][oO][nN][tT][hH] "(" Expression ")" |
                                           [dD][aA][yY] "(" Expression ")" |
                                           [hH][oO][uU][rR][sS] "(" Expression ")" |
                                           [mM][iI][nN][uU][tT][eE][sS] "(" Expression ")" |
                                           [sS][eE][cC][oO][nN][dD][sS] "(" Expression ")" |
                                           [tT][iI][mM][eE][zZ][oO][nN][eE] "(" Expression ")" |
                                           [tT][zZ] "(" Expression ")" |
                                           [nN][oO][wW] NIL |
                                           [uU][uU][iI][dD] NIL |
                                           [sS][tT][rR][uU][uU][iI][dD] NIL |
                                           [mM][dD]"5" "(" Expression ")" |
                                           [sS][hH][aA]"1" "(" Expression ")" |
                                           [sS][hH][aA]"256" "(" Expression ")" |
                                           [sS][hH][aA]"384" "(" Expression ")" |
                                           [sS][hH][aA][55]"12" "(" Expression ")" |
                                           [cC][oO][aA][lL][eE][sS][cC][eE] ExpressionList |
                                           [iI][fF] "(" Expression "," Expression "," Expression ")" |
                                           [sS][tT][rR][lL][aA][nN][gG] "(" Expression "," Expression ")" |
                                           [sS][tT][rR][dD][tT] "(" Expression "," Expression ")" |
                                           "sameTerm" "(" Expression "," Expression ")" |
                                           "isIRI" "(" Expression ")" |
                                           "isURI" "(" Expression ")" |
                                           "isBLANK" "(" Expression ")" |
                                           "isLITERAL" "(" Expression ")" |
                                           "isNUMERIC" "(" Expression ")" |
                                           RegexExpression |
                                           ExistsFunc |
                                           NotExistsFunc
RegexExpression    ::=    [rR][eE][gG][eE][xX] "(" Expression "," Expression ( "," Expression )? ")"
SubstringExpression    ::=    [sS][uU][bB][sS][tT][rR] "(" Expression "," Expression ( "," Expression )? ")"
StrReplaceExpression    ::=    [rR][eE][pP][lL][aA][cC][eE] "(" Expression "," Expression "," Expression ( "," Expression )? ")"
ExistsFunc    ::=    [eE][xX][iI][sS][tT][sS] GroupGraphPattern
NotExistsFunc    ::=    [nN][oO][tT] [eE][xX][iI][sS][tT][sS] GroupGraphPattern
Aggregate    ::=    [cC][oO][uU][nN][tT] "(" [dD][iI][sS][tT][iI][nN][cC][tT]? ( "*" | Expression ) ")" |
                                            [sS][uU][mM] "(" [dD][iI][sS][tT][iI][nN][cC][tT]? Expression ")" |
                                            [mM][iI][nN] "(" [dD][iI][sS][tT][iI][nN][cC][tT]? Expression ")" |
                                            [mM][aA][xX] "(" [dD][iI][sS][tT][iI][nN][cC][tT]? Expression ")" |
                                            [aA][vV][gG] "(" [dD][iI][sS][tT][iI][nN][cC][tT]? Expression ")" |
                                            [sS][aA][mM][pP][lL][eE] "(" [dD][iI][sS][tT][iI][nN][cC][tT]? Expression ")" |
                                            [gG][rR][oO][uU][pP]"_"[cC][oO][nN][cC][aA][tT] "(" [dD][iI][sS][tT][iI][nN][cC][tT]? Expression ( ";" [sS][eE][pP][aA][rR][aA][tT][oO][rR] "=" String )? ")"
iriOrFunction    ::=    iri ArgList?
RDFLiteral    ::=    String ( LANGTAG | ( "^^" iri ) )?
NumericLiteral    ::=    NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
NumericLiteralUnsigned    ::=    INTEGER | DECIMAL | DOUBLE
NumericLiteralPositive    ::=    INTEGER-POSITIVE | DECIMAL-POSITIVE | DOUBLE-POSITIVE
NumericLiteralNegative    ::=    INTEGER-NEGATIVE | DECIMAL-NEGATIVE | DOUBLE-NEGATIVE
BooleanLiteral    ::=    "true" | "false"
String    ::=    STRING-LITERAL1 | STRING-LITERAL2 | STRING-LITERAL-LONG1 | STRING-LITERAL-LONG2
iri    ::=    IRIREF | PrefixedName
PrefixedName    ::=    PNAME-LN | PNAME-NS
BlankNode    ::=    BLANK-NODE-LABEL | ANON

# Productions for terminals:

IRIREF    ::=    "<" ([^<>"{}|^`\]-[\x00-\x20])* ">"
PNAME-NS    ::=    PN-PREFIX? ":"
PNAME-LN    ::=    PNAME-NS PN-LOCAL
BLANK-NODE-LABEL    ::=    "_:" ( PN-CHARS-U | [0-9] ) ((PN-CHARS|".")* PN-CHARS)?
VAR1    ::=    "?" VARNAME
VAR2    ::=    "$" VARNAME
LANGTAG    ::=    "@" [a-zA-Z]+ ("-" [a-zA-Z0-9]+)*
INTEGER    ::=    [0-9]+
DECIMAL    ::=    [0-9]* "." [0-9]+
DOUBLE    ::=    [0-9]+ "." [0-9]* EXPONENT | "." ([0-9])+ EXPONENT | ([0-9])+ EXPONENT
INTEGER-POSITIVE    ::=    "+" INTEGER
DECIMAL-POSITIVE    ::=    "+" DECIMAL
DOUBLE-POSITIVE    ::=    "+" DOUBLE
INTEGER-NEGATIVE    ::=    "-" INTEGER
DECIMAL-NEGATIVE    ::=    "-" DECIMAL
DOUBLE-NEGATIVE    ::=    "-" DOUBLE
EXPONENT    ::=    [eE] [+-]? [0-9]+
STRING-LITERAL1    ::=    "'" ( ([^\x27\x5C\x0A\x0D]) | ECHAR )* "'"
STRING-LITERAL2    ::=    "\"" ( ([^\x22\x5C\x0A\x0D]) | ECHAR )* "\""
STRING-LITERAL-LONG1    ::=    "'''" ( ( "'" | "''" )? ( [^'\\] | ECHAR ) )* "'''"
STRING-LITERAL-LONG2    ::=    "\"\"\"" ( ( "\"" | "\"\"" )? ( [^"\\] | ECHAR ) )* "\"\"\""
ECHAR    ::=    "\\" [tbnrf'"]
NIL    ::=    "(" WS* ")"
WS    ::=    [\x20] | [\x09] | [\x0D] | [\x0A]
ANON    ::=    "[" WS* "]"
PN-CHARS-BASE    ::=    [A-Z] | [a-z] # | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
PN-CHARS-U    ::=    PN-CHARS-BASE | "_"
VARNAME    ::=    ( PN-CHARS-U | [0-9] ) ( PN-CHARS-U | [0-9] | [\xB7] )* # | [#x0300-#x036F] | [#x203F-#x2040] )*
PN-CHARS    ::=    PN-CHARS-U | "-" | [0-9] | [\xB7] # | [#x0300-#x036F] | [#x203F-#x2040]
PN-PREFIX    ::=    PN-CHARS-BASE ((PN-CHARS|".")* PN-CHARS)?
PN-LOCAL    ::=    (PN-CHARS-U | ":" | [0-9] | PLX ) ((PN-CHARS | "." | ":" | PLX)* (PN-CHARS | ":" | PLX) )?
PLX    ::=    PERCENT | PN-LOCAL-ESC
PERCENT    ::=    "%" HEX HEX
HEX    ::=    [0-9] | [A-F] | [a-f]
PN-LOCAL-ESC    ::=    "\\" ( "_" | "~" | "." | "-" | "!" | "$" | "&" | "'" | "(" | ")" | "*" | "+" | "," | ";" | "=" | "/" | "?" | "#" | "@" | "%" )

WS ::= " " | "\r" | "\n" | "\t" | "#" [^\n]* [\n]
